{"ast":null,"code":"var _jsxFileName = \"/home/live/visualstudio/chatbot_react/chatbot_django_react/chatbot-app/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport ChatbotApp from './ChatbotApp';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { BrowserRouter as Router, Route, Routes, useNavigate } from 'react-router-dom';\nimport styles from './styles/Chatbot.module.css';\nimport axios from 'axios';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TypingText = _ref => {\n  _s();\n  let {\n    text,\n    onTypingComplete\n  } = _ref;\n  const [displayText, setDisplayText] = useState('');\n  useEffect(() => {\n    let currentIndex = 0;\n    const typingTimer = setInterval(() => {\n      setDisplayText(prevText => {\n        if (currentIndex >= text.length) {\n          clearInterval(typingTimer);\n          onTypingComplete(); // Invocar la función cuando el texto de escritura haya terminado\n          return prevText;\n        }\n        currentIndex++;\n        return text.substring(0, currentIndex);\n      });\n    }, 100);\n    return () => {\n      clearInterval(typingTimer);\n    };\n  }, [text, onTypingComplete]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: displayText\n  }, void 0, false);\n};\n_s(TypingText, \"Z72AqRalvcuvuUyHd5OLwsN/cpk=\");\n_c = TypingText;\nconst Chatbot = () => {\n  _s2();\n  const navigate = useNavigate();\n  const [messages, setMessages] = useState([{\n    text: '¡Bienvenido al chatbot!',\n    sender: 'bot'\n  }]);\n  const [isBotTyping, setIsBotTyping] = useState(false); // Estado para controlar si el bot está escribiendo\n  const [botWritingState, setBotWritingState] = useState({}); // Estado para almacenar el estado de escritura del bot\n\n  const messagesContainerRef = useRef(null);\n  const handleSendMessage = async event => {\n    event.preventDefault();\n    const inputMessage = event.target.message.value;\n    if (inputMessage.trim() !== '') {\n      const messageWithLineBreak = inputMessage + '\\n';\n      setMessages([...messages, {\n        text: messageWithLineBreak,\n        sender: 'user'\n      }]);\n      event.target.reset();\n      setIsBotTyping(true); // Establecer el estado del bot como escribiendo\n\n      try {\n        const botResponse = await sendMessageToBackend(inputMessage);\n\n        // Esperar un segundo antes de mostrar la respuesta del bot\n        await wait(1000);\n        setMessages(prevMessages => [...prevMessages, {\n          text: botResponse,\n          sender: 'bot'\n        }]);\n      } catch (error) {\n        console.error(error);\n      }\n      setIsBotTyping(false); // Establecer el estado del bot como no escribiendo\n    }\n  };\n\n  const sendMessageToBackend = async message => {\n    try {\n      const response = await axios.post('http://localhost:8000/chat/send-message/', {\n        message: message\n      });\n      if (response.status === 200) {\n        const botResponse = response.data.message;\n        if (botResponse) {\n          return botResponse;\n        } else {\n          console.error('La respuesta del bot no tiene una propiedad \"message\"');\n        }\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const wait = ms => {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  };\n  useEffect(() => {\n    if (messagesContainerRef.current) {\n      messagesContainerRef.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'end'\n      });\n    }\n  }, [messages]);\n  const handleRedirect = () => {\n    navigate('/ChatbotApp.js');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles['chatbot-container'],\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"messages-container\",\n      className: styles['messages-container'],\n      children: [messages.map((message, index) => {\n        if (message.sender === 'bot') {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `${styles['message']} ${styles['bot']}`,\n            style: {\n              backgroundColor: message.color\n            },\n            children: /*#__PURE__*/_jsxDEV(TypingText, {\n              text: message.text,\n              onTypingComplete: () => {\n                setIsBotTyping(false);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `${styles['message']} ${styles['user']}`,\n            style: {\n              backgroundColor: message.color\n            },\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: styles['message-text'],\n              children: message.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this);\n        }\n      }), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesContainerRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSendMessage,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"message\",\n        placeholder: \"Escribe un mensaje...\",\n        disabled: isBotTyping // Deshabilitar el campo de entrada mientras el bot está escribiendo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: isBotTyping,\n        children: \"Enviar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), ' ']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRedirect,\n      children: \"Ir a ChatbotApp\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s2(Chatbot, \"XwPdhoGqQelW18vpXYWnRiFuYe0=\", false, function () {\n  return [useNavigate];\n});\n_c2 = Chatbot;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"TypingText\");\n$RefreshReg$(_c2, \"Chatbot\");","map":{"version":3,"names":["ChatbotApp","React","useState","useEffect","useRef","BrowserRouter","Router","Route","Routes","useNavigate","styles","axios","Fragment","_Fragment","jsxDEV","_jsxDEV","TypingText","_ref","_s","text","onTypingComplete","displayText","setDisplayText","currentIndex","typingTimer","setInterval","prevText","length","clearInterval","substring","children","_c","Chatbot","_s2","navigate","messages","setMessages","sender","isBotTyping","setIsBotTyping","botWritingState","setBotWritingState","messagesContainerRef","handleSendMessage","event","preventDefault","inputMessage","target","message","value","trim","messageWithLineBreak","reset","botResponse","sendMessageToBackend","wait","prevMessages","error","console","response","post","status","data","ms","Promise","resolve","setTimeout","current","scrollIntoView","behavior","block","handleRedirect","className","id","map","index","style","backgroundColor","color","fileName","_jsxFileName","lineNumber","columnNumber","ref","onSubmit","type","name","placeholder","disabled","onClick","_c2","App","$RefreshReg$"],"sources":["/home/live/visualstudio/chatbot_react/chatbot_django_react/chatbot-app/src/App.js"],"sourcesContent":["import ChatbotApp from './ChatbotApp';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { BrowserRouter as Router, Route, Routes, useNavigate } from 'react-router-dom';\nimport styles from './styles/Chatbot.module.css';\nimport axios from 'axios';\n\nconst TypingText = ({ text, onTypingComplete }) => {\n  const [displayText, setDisplayText] = useState('');\n\n  useEffect(() => {\n    let currentIndex = 0;\n    const typingTimer = setInterval(() => {\n      setDisplayText((prevText) => {\n        if (currentIndex >= text.length) {\n          clearInterval(typingTimer);\n          onTypingComplete(); // Invocar la función cuando el texto de escritura haya terminado\n          return prevText;\n        }\n        currentIndex++;\n        return text.substring(0, currentIndex);\n      });\n    }, 100);\n\n    return () => {\n      clearInterval(typingTimer);\n    };\n  }, [text, onTypingComplete]);\n\n  return <>{displayText}</>;\n};\n\nconst Chatbot = () => {\n  const navigate = useNavigate();\n\n  const [messages, setMessages] = useState([\n    { text: '¡Bienvenido al chatbot!', sender: 'bot' },\n  ]);\n  const [isBotTyping, setIsBotTyping] = useState(false); // Estado para controlar si el bot está escribiendo\n  const [botWritingState, setBotWritingState] = useState({}); // Estado para almacenar el estado de escritura del bot\n\n  const messagesContainerRef = useRef(null);\n\n  const handleSendMessage = async (event) => {\n    event.preventDefault();\n    const inputMessage = event.target.message.value;\n    if (inputMessage.trim() !== '') {\n      const messageWithLineBreak = inputMessage + '\\n';\n      setMessages([...messages, { text: messageWithLineBreak, sender: 'user' }]);\n      event.target.reset();\n\n      setIsBotTyping(true); // Establecer el estado del bot como escribiendo\n\n      try {\n        const botResponse = await sendMessageToBackend(inputMessage);\n\n        // Esperar un segundo antes de mostrar la respuesta del bot\n        await wait(1000);\n\n        setMessages((prevMessages) => [\n          ...prevMessages,\n          { text: botResponse, sender: 'bot' },\n        ]);\n      } catch (error) {\n        console.error(error);\n      }\n\n      setIsBotTyping(false); // Establecer el estado del bot como no escribiendo\n    }\n  };\n\n  const sendMessageToBackend = async (message) => {\n    try {\n      const response = await axios.post('http://localhost:8000/chat/send-message/', {\n        message: message,\n      });\n\n      if (response.status === 200) {\n        const botResponse = response.data.message;\n        if (botResponse) {\n          return botResponse;\n        } else {\n          console.error('La respuesta del bot no tiene una propiedad \"message\"');\n        }\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const wait = (ms) => {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  };\n\n  useEffect(() => {\n    if (messagesContainerRef.current) {\n      messagesContainerRef.current.scrollIntoView({ behavior: 'smooth', block: 'end' });\n    }\n  }, [messages]);\n\n  const handleRedirect = () => {\n    navigate('/ChatbotApp.js');\n  };\n\n  return (\n    <div className={styles['chatbot-container']}>\n      <div id=\"messages-container\" className={styles['messages-container']}>\n        {messages.map((message, index) => {\n          if (message.sender === 'bot') {\n            return (\n              <div\n                key={index}\n                className={`${styles['message']} ${styles['bot']}`}\n                style={{ backgroundColor: message.color }}\n              >\n                <TypingText\n                  text={message.text}\n                  onTypingComplete={() => {\n                    setIsBotTyping(false);\n                  }}\n                />\n              </div>\n            );\n          } else {\n            return (\n              <div\n                key={index}\n                className={`${styles['message']} ${styles['user']}`}\n                style={{ backgroundColor: message.color }}\n              >\n                <span className={styles['message-text']}>{message.text}</span>\n              </div>\n            );\n          }\n        })}\n        <div ref={messagesContainerRef} />\n      </div>\n      <form onSubmit={handleSendMessage}>\n        <input\n          type=\"text\"\n          name=\"message\"\n          placeholder=\"Escribe un mensaje...\"\n          disabled={isBotTyping} // Deshabilitar el campo de entrada mientras el bot está escribiendo\n        />\n        <button type=\"submit\" disabled={isBotTyping}>\n          Enviar\n        </button>{' '}\n        {/* Deshabilitar el botón de enviar mientras el bot está escribiendo */}\n      </form>\n      <button onClick={handleRedirect}>Ir a ChatbotApp</button>\n    </div>\n  );\n};\n\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}