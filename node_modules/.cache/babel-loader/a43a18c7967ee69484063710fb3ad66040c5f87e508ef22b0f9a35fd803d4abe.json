{"ast":null,"code":"var _jsxFileName = \"/home/live/visualstudio/chatbot_react/chatbot_django_react/chatbot-app/src/App.js\",\n  _s = $RefreshSig$();\nimport ChatbotApp from './ChatbotApp';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { BrowserRouter as Router, Route, Routes, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport styles from './styles/Chatbot.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const navigate = useNavigate();\n  const [messages, setMessages] = useState([]);\n  const [isBotWriting, setIsBotWriting] = useState(false);\n  const messagesContainerRef = useRef(null);\n  const scrollToBottom = () => {\n    if (messagesContainerRef.current) {\n      messagesContainerRef.current.scrollTop = messagesContainerRef.current.scrollHeight;\n    }\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const handleSendMessage = async event => {\n    event.preventDefault();\n    const inputMessage = event.target.message.value.trim();\n    if (inputMessage !== '') {\n      const messageWithLineBreak = inputMessage + '\\n';\n      const userMessage = {\n        text: messageWithLineBreak,\n        sender: 'user'\n      };\n      setMessages(prevMessages => [userMessage, ...prevMessages]);\n      event.target.reset();\n      setIsBotWriting(true);\n      try {\n        const botResponse = await sendMessageToBackend(inputMessage);\n\n        // Mostrar el efecto de escritura letra por letra solo para el mensaje del bot\n        let responseSubstring = '';\n        /* eslint-disable no-loop-func */\n        for (let i = 0; i < botResponse.length; i++) {\n          await wait(100); // Esperar un tiempo entre cada letra (ajusta el tiempo según tus preferencias)\n          responseSubstring += botResponse.charAt(i);\n          if (i === botResponse.length - 1) {\n            setMessages(prevMessages => [...prevMessages.slice(0, -1),\n            // Remover el último mensaje del bot\n            {\n              text: responseSubstring,\n              sender: 'bot'\n            }]);\n          } else {\n            setMessages(prevMessages => [...prevMessages.slice(0, -1),\n            // Remover el último mensaje del bot\n            {\n              text: responseSubstring,\n              sender: 'bot'\n            }]);\n          }\n          scrollToBottom();\n        }\n        /* eslint-enable no-loop-func */\n      } catch (error) {\n        console.error(error);\n      }\n      setIsBotWriting(false);\n      event.target.message.focus();\n    }\n  };\n  const sendMessageToBackend = async message => {\n    try {\n      const response = await axios.post('http://localhost:8000/chat/send-message/', {\n        message\n      });\n      if (response.status === 200) {\n        const botResponse = response.data.message;\n        if (botResponse) {\n          return botResponse;\n        } else {\n          console.error('La respuesta del bot no tiene una propiedad \"message\"');\n        }\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const wait = ms => {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  };\n  const handleRedirect = () => {\n    navigate('/ChatbotApp');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles['chatbot-container'],\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"messages-container\",\n      className: styles['messages-container'],\n      ref: messagesContainerRef,\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${styles['message']} ${message.sender === 'user' ? styles['user'] : styles['bot']}`,\n        style: {\n          backgroundColor: message.color\n        },\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: styles['message-text'],\n          children: message.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSendMessage,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"message\",\n        placeholder: \"Escribe un mensaje...\",\n        disabled: isBotWriting\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: isBotWriting,\n        children: \"Enviar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles['input-group-space']\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n      className: styles['button-goto-chatbot'],\n      onClick: handleRedirect,\n      children: \"Ir a ChatbotApp\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"HpOQeVhK1auM8yV6PSjWfiIcMa8=\", false, function () {\n  return [useNavigate];\n});\n_c = Chatbot;\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles['App'],\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Chatbot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(Chatbot, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 36\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/ChatbotApp\",\n          element: /*#__PURE__*/_jsxDEV(ChatbotApp, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 46\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"Chatbot\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["ChatbotApp","React","useState","useEffect","useRef","BrowserRouter","Router","Route","Routes","useNavigate","axios","styles","jsxDEV","_jsxDEV","Chatbot","_s","navigate","messages","setMessages","isBotWriting","setIsBotWriting","messagesContainerRef","scrollToBottom","current","scrollTop","scrollHeight","handleSendMessage","event","preventDefault","inputMessage","target","message","value","trim","messageWithLineBreak","userMessage","text","sender","prevMessages","reset","botResponse","sendMessageToBackend","responseSubstring","i","length","wait","charAt","slice","error","console","focus","response","post","status","data","ms","Promise","resolve","setTimeout","handleRedirect","className","children","id","ref","map","index","style","backgroundColor","color","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","name","placeholder","disabled","onClick","_c","App","path","element","_c2","$RefreshReg$"],"sources":["/home/live/visualstudio/chatbot_react/chatbot_django_react/chatbot-app/src/App.js"],"sourcesContent":["import ChatbotApp from './ChatbotApp';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { BrowserRouter as Router, Route, Routes, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport styles from './styles/Chatbot.module.css';\n\n  const Chatbot = () => {\n    const navigate = useNavigate();\n    const [messages, setMessages] = useState([]);\n    const [isBotWriting, setIsBotWriting] = useState(false);\n    const messagesContainerRef = useRef(null);\n  \n    const scrollToBottom = () => {\n      if (messagesContainerRef.current) {\n        messagesContainerRef.current.scrollTop = messagesContainerRef.current.scrollHeight;\n      }\n    };\n  \n    useEffect(() => {\n      scrollToBottom();\n    }, [messages]);\n  \n    const handleSendMessage = async (event) => {\n      event.preventDefault();\n      const inputMessage = event.target.message.value.trim();\n      if (inputMessage !== '') {\n        const messageWithLineBreak = inputMessage + '\\n';\n        const userMessage = { text: messageWithLineBreak, sender: 'user' };\n        setMessages((prevMessages) => [userMessage, ...prevMessages]);\n        event.target.reset();\n        setIsBotWriting(true);\n  \n      try {\n        const botResponse = await sendMessageToBackend(inputMessage);\n  \n        // Mostrar el efecto de escritura letra por letra solo para el mensaje del bot\n        let responseSubstring = '';\n        /* eslint-disable no-loop-func */\n        for (let i = 0; i < botResponse.length; i++) {\n          await wait(100); // Esperar un tiempo entre cada letra (ajusta el tiempo según tus preferencias)\n          responseSubstring += botResponse.charAt(i);\n          if (i === botResponse.length - 1) {\n            setMessages((prevMessages) => [\n              ...prevMessages.slice(0, -1), // Remover el último mensaje del bot\n              { text: responseSubstring, sender: 'bot' },\n            ]);\n          } else {\n            setMessages((prevMessages) => [\n              ...prevMessages.slice(0, -1), // Remover el último mensaje del bot\n              { text: responseSubstring, sender: 'bot' },\n            ]);\n          }\n          scrollToBottom();\n        }\n        /* eslint-enable no-loop-func */\n      } catch (error) {\n        console.error(error);\n      }\n  \n      setIsBotWriting(false);\n      event.target.message.focus();\n    }\n  };\n\n  const sendMessageToBackend = async (message) => {\n    try {\n      const response = await axios.post('http://localhost:8000/chat/send-message/', { message });\n      if (response.status === 200) {\n        const botResponse = response.data.message;\n        if (botResponse) {\n          return botResponse;\n        } else {\n          console.error('La respuesta del bot no tiene una propiedad \"message\"');\n        }\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const wait = (ms) => {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  };\n\n  const handleRedirect = () => {\n    navigate('/ChatbotApp');\n  };\n\n  return (\n    <div className={styles['chatbot-container']}>\n      <div id=\"messages-container\" className={styles['messages-container']} ref={messagesContainerRef}>\n        {messages.map((message, index) => (\n          <div\n            key={index}\n            className={`${styles['message']} ${message.sender === 'user' ? styles['user'] : styles['bot']}`}\n            style={{ backgroundColor: message.color }}\n          >\n            <span className={styles['message-text']}>{message.text}</span>\n          </div>\n        ))}\n      </div>\n      <form onSubmit={handleSendMessage}>\n        <input\n          type=\"text\"\n          name=\"message\"\n          placeholder=\"Escribe un mensaje...\"\n          disabled={isBotWriting}\n        />\n        <button type=\"submit\" disabled={isBotWriting}>Enviar</button>\n      </form>\n      <div className={styles['input-group-space']}></div> {/* Espacio adicional */}\n      <button className={styles['button-goto-chatbot']} onClick={handleRedirect}>\n        Ir a ChatbotApp\n      </button>\n    </div>\n  );\n};\n\nconst App = () => {\n  return (\n    <Router>\n      <div className={styles['App']}>\n        <h1>Chatbot</h1>\n        <Routes>\n          <Route path=\"/\" element={<Chatbot />} />\n          <Route path=\"/ChatbotApp\" element={<ChatbotApp />} />\n        </Routes>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}